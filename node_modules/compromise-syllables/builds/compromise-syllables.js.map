{"version":3,"file":"compromise-syllables.js","sources":["../src/postProcess.js","../src/syllables.js","../src/index.js"],"sourcesContent":["const starts_with_single_vowel_combos = /^(eu)/i\nconst joining_consonant_vowel = /^[^aeiou][e]([^d]|$)/\nconst cvcv_same_consonant = /^([^aeiouy])[aeiouy]\\1[aeiouy]/\nconst cvcv_same_vowel = /^[^aeiouy]([aeiouy])[^aeiouy]\\1/\nconst cvcv_known_consonants = /^([tg][aeiouy]){2}/\nconst only_one_or_more_c = /^[^aeiouy]+$/\n\nconst ends_with_vowel = /[aeiouy]$/\nconst starts_with_consonant_vowel = /^[^aeiouy][h]?[aeiouy]/\n\nconst ones = [\n  /^[^aeiou]?ion/,\n  /^[^aeiou]?ised/,\n  /^[^aeiou]?iled/,\n\n  // -ing, -ent\n  /[aeiou][n][gt]$/,\n\n  // -ate, -age\n  /\\wa[gt]e$/,\n]\n\n//suffix fixes\nconst postprocess = function(arr) {\n  //trim whitespace\n  arr = arr.map(function(w) {\n    return w.trim()\n  })\n  arr = arr.filter(function(w) {\n    return w !== ''\n  })\n  // if (arr.length > 2) {\n  //   return arr;\n  // }\n  let l = arr.length\n  if (l > 1) {\n    let suffix = arr[l - 2] + arr[l - 1]\n    for (let i = 0; i < ones.length; i++) {\n      if (suffix.match(ones[i])) {\n        arr[l - 2] = arr[l - 2] + arr[l - 1]\n        arr.pop()\n      }\n    }\n  }\n\n  // since the open syllable detection is overzealous,\n  // sometimes need to rejoin incorrect splits\n  if (arr.length > 1) {\n    let first_is_open =\n      (arr[0].length === 1 || arr[0].match(starts_with_consonant_vowel)) &&\n      arr[0].match(ends_with_vowel)\n    let second_is_joining = arr[1].match(joining_consonant_vowel)\n\n    if (first_is_open && second_is_joining) {\n      let possible_combination = arr[0] + arr[1]\n      let probably_separate_syllables =\n        possible_combination.match(cvcv_same_consonant) ||\n        possible_combination.match(cvcv_same_vowel) ||\n        possible_combination.match(cvcv_known_consonants)\n\n      if (!probably_separate_syllables) {\n        arr[0] = arr[0] + arr[1]\n        arr.splice(1, 1)\n      }\n    }\n  }\n\n  if (arr.length > 1) {\n    let second_to_last_is_open =\n      arr[arr.length - 2].match(starts_with_consonant_vowel) &&\n      arr[arr.length - 2].match(ends_with_vowel)\n    let last_is_joining =\n      arr[arr.length - 1].match(joining_consonant_vowel) &&\n      ones.every(re => !arr[arr.length - 1].match(re))\n\n    if (second_to_last_is_open && last_is_joining) {\n      let possible_combination = arr[arr.length - 2] + arr[arr.length - 1]\n      let probably_separate_syllables =\n        possible_combination.match(cvcv_same_consonant) ||\n        possible_combination.match(cvcv_same_vowel) ||\n        possible_combination.match(cvcv_known_consonants)\n\n      if (!probably_separate_syllables) {\n        arr[arr.length - 2] = arr[arr.length - 2] + arr[arr.length - 1]\n        arr.splice(arr.length - 1, 1)\n      }\n    }\n  }\n\n  if (arr.length > 1) {\n    let single = arr[0] + arr[1]\n    if (single.match(starts_with_single_vowel_combos)) {\n      arr[0] = single\n      arr.splice(1, 1)\n    }\n  }\n\n  if (arr.length > 1) {\n    if (arr[arr.length - 1].match(only_one_or_more_c)) {\n      arr[arr.length - 2] = arr[arr.length - 2] + arr[arr.length - 1]\n      arr.splice(arr.length - 1, 1)\n    }\n  }\n\n  return arr\n}\nmodule.exports = postprocess\n","//chop a string into pronounced syllables\nconst postProcess = require('./postProcess')\n\nconst all_spaces = / +/g\nconst ends_with_vowel = /[aeiouy]$/\nconst starts_with_consonant_vowel = /^[^aeiouy][h]?[aeiouy]/\nconst starts_with_e_then_specials = /^e[sm]/\nconst starts_with_e = /^e/\nconst ends_with_noisy_vowel_combos = /(eo|eu|ia|oa|ua|ui)$/i\nconst aiouy = /[aiouy]/\nconst ends_with_ee = /ee$/\n// const whitespace_dash = /\\s\\-/\n\n//method is nested because it's called recursively\nconst doWord = function(w) {\n  let all = []\n  let chars = w.split('')\n  let before = ''\n  let after = ''\n  let current = ''\n  for (let i = 0; i < chars.length; i++) {\n    before = chars.slice(0, i).join('')\n    current = chars[i]\n    after = chars.slice(i + 1, chars.length).join('')\n    let candidate = before + chars[i]\n\n    //it's a consonant that comes after a vowel\n    if (before.match(ends_with_vowel) && !current.match(ends_with_vowel)) {\n      if (after.match(starts_with_e_then_specials)) {\n        candidate += 'e'\n        after = after.replace(starts_with_e, '')\n      }\n      all.push(candidate)\n      return all.concat(doWord(after))\n    }\n\n    //unblended vowels ('noisy' vowel combinations)\n    if (candidate.match(ends_with_noisy_vowel_combos)) {\n      //'io' is noisy, not in 'ion'\n      all.push(before)\n      all.push(current)\n      return all.concat(doWord(after)) //recursion\n    }\n\n    // if candidate is followed by a CV, assume consecutive open syllables\n    if (candidate.match(ends_with_vowel) && after.match(starts_with_consonant_vowel)) {\n      all.push(candidate)\n      return all.concat(doWord(after))\n    }\n  }\n  //if still running, end last syllable\n  if (w.match(aiouy) || w.match(ends_with_ee)) {\n    //allow silent trailing e\n    all.push(w)\n  } else if (w) {\n    let last = all.length - 1\n    if (last < 0) {\n      last = 0\n    }\n    all[last] = (all[last] || '') + w //append it to the last one\n  }\n  return all\n}\n\nlet syllables = function(str) {\n  let all = []\n  if (!str) {\n    return all\n  }\n  str = str.replace(/[.,?]/g, '')\n  str.split(all_spaces).map(s => {\n    all = all.concat(doWord(s))\n  })\n\n  // str.split(whitespace_dash).forEach(doWord)\n  all = postProcess(all)\n\n  //for words like 'tree' and 'free'\n  if (all.length === 0) {\n    all = [str]\n  }\n  //filter blanks\n  all = all.filter(s => s)\n\n  return all\n}\n\n// console.log(syllables('civilised'))\n\nmodule.exports = syllables\n","const getSyllables = require('./syllables')\n\nconst defaultObj = { normal: true, text: true, terms: false }\n\nconst addMethod = function(Doc) {\n  /** split each term by typical pronounciation */\n  Doc.prototype.syllables = function(obj) {\n    let n = null\n    if (typeof obj === 'number') {\n      n = obj\n      obj = {}\n    }\n    let data = this.json(obj || defaultObj)\n    //add syllable data to each phrase\n    data = data.map(o => {\n      o.syllables = getSyllables(o.normal || o.text)\n      return o\n    })\n    if (typeof n === 'number') {\n      data = data[n]\n    }\n    return data\n  }\n\n  return Doc\n}\nmodule.exports = addMethod\n"],"names":["starts_with_single_vowel_combos","joining_consonant_vowel","cvcv_same_consonant","cvcv_same_vowel","cvcv_known_consonants","only_one_or_more_c","ends_with_vowel","starts_with_consonant_vowel","ones","postprocess","arr","map","w","trim","filter","l","length","suffix","i","match","pop","first_is_open","second_is_joining","possible_combination","probably_separate_syllables","splice","second_to_last_is_open","last_is_joining","every","re","single","all_spaces","starts_with_e_then_specials","starts_with_e","ends_with_noisy_vowel_combos","aiouy","ends_with_ee","doWord","all","chars","split","before","after","current","slice","join","candidate","replace","push","concat","last","syllables","str","s","postProcess","defaultObj","normal","text","terms","addMethod","Doc","prototype","obj","n","data","json","o","getSyllables"],"mappings":"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"}